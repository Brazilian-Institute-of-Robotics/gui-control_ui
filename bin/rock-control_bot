#! /usr/bin/env ruby

require 'vizkit'
require 'optparse'

use_test_gui = true
hostname = nil
do_read=true
do_write=true
options = OptionParser.new do |opt|
    opt.banner = <<-EOD
rock-control_bot [options] /path/to/model/file [task context to write joint commands to]
    EOD
    opt.on '--host=HOSTNAME', String, 'the host we should contact to find RTT tasks' do |host|
        hostname = host
    end
    opt.on '--help', 'this help message' do
        puts opt
    end
    opt.on '--dont_read', "Don't read joint state from provided task context." do
        do_read=false
    end
    opt.on '--dont_write', "Don't write joint commands to provided task context." do
        do_write=false
    end
end

args = options.parse(ARGV)
model_file = args.shift
task_context_name = args.shift

if !model_file
    puts "missing model file argument"
    puts options
    exit 1
end

if task_context_name
    if hostname
        Orocos::CORBA.name_service.ip = hostname
    end
    Orocos.initialize
end

ctrl_gui = Vizkit.default_loader.ControlUi
ctrl_gui.initModel(model_file.dup)
    
if task_context_name
    control = Orocos::Async.name_service.get task_context_name

    #find commands input port
    if do_write
        matching_ports = control.ports.find_all {|p| p.is_a? Orocos::InputPort and p.type == Types::Base::Commands::Joints}
        if matching_ports.size > 1
          puts "Multiple joint command consumer ports. Don't know which to use."
          matching_ports.each { |p| puts p.name }
        
          exit 1
        end
        if matching_ports.size < 1 
            puts "No joint command consumer port available."
            exit 1
        end
        writer = matching_ports[0].writer
        ctrl_gui.connect(SIGNAL('sendSignal()')) do 
            sample = ctrl_gui.getJoints()
            #sample = Types::Base::Commands::Joints.new
            #sample.names = [name]
            #sample.elements = [Types::Base::JointState.new(:position => val)]
            
            writer.write(sample)
            puts "writing #{sample.to_s}"
            #puts name, val
        end
    end

    #find state output port
    if do_read
        matching_ports = control.ports.find_all {|p| p.is_a? Orocos::OutputPort and p.type == Types::Base::Samples::Joints}
        if matching_ports.size > 1
          puts "Multiple joint state producer ports. Don't know which to use."
          matching_ports.each { |p| puts p.name }
          exit 1
        end
        if matching_ports.size < 1 
            puts "No joint command consumer port available."
            exit 1
        end

        matching_ports[0].connect_to do |sample,_|
            ctrl_gui.setJointState(sample)
        end
    end
end
Vizkit.exec    
    
